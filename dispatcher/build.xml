<!-- vim: set expandtab ts=4 sw=4 : -->

<!-- targets in this file should be called from the parent directory -->
<project basedir="../..">
    <import file="../../docker.xml" />
    <import file="../../common/build.xml" />

    <!-- build the docker image for the dispatcher service -->
    <target name="compileDispatcher" depends="initScala">
        <var file="whisk.properties" />
        <!-- build sources -->
        <mkdir dir="${build.dir}/dispatcher" />
        <scalac destdir="${build.dir}/dispatcher" failonerror="true" scalacdebugging="true" fork="true">
            <src path="${openwhisk.dir}/core/dispatcher/src" />
            <classpath path="${build.dir}/commonScala" />
            <classpath path="${build.dir}/dispatcher" />
            <classpath refid="libJars" />
            <classpath refid="scala.build.classpath" />
        </scalac>
    </target>

    <!-- build the docker image for the dispatcher service -->
    <target name="buildDispatcher" depends="compileDispatcher">
        <var file="whisk.properties" />

        <!-- copy files needed to build image to a scratch space -->
        <tempfile property="dispatcher.scratch" prefix="dispatcher" destDir="${docker.scratch}" />
        <mkdir dir="${dispatcher.scratch}" />
        <copy file="${openwhisk.dir}/core/dispatcher/Dockerfile" todir="${dispatcher.scratch}" />
        <copy file="${openwhisk.dir}/core/dispatcher/startDispatcher.sh" todir="${dispatcher.scratch}" />
        <jar destfile="${dispatcher.scratch}/dispatcher.jar">
            <fileset dir="${build.dir}/commonScala" />
            <fileset dir="${build.dir}/dispatcher" />
            <fileset file="${openwhisk.dir}/common/scala/src/log4j.properties" />
            <fileset file="${openwhisk.dir}/common/scala/src/logging.conf" />
            <fileset file="${openwhisk.dir}/core/dispatcher/src/resources/application.conf" />
        </jar>

        <tar destfile="${dispatcher.scratch}/dispatcher-libs.tar">
            <tarfileset dir="${openwhisk.dir}/common/libs/common" prefix="dispatcher-libs">
                <include name="cloudant-client-1.0.1.jar" />
                <include name="concurrentlinkedhashmap-lru-1.3.1.jar" />
                <include name="commons-io-2.4.jar" />
                <include name="commons-codec-1.9.jar" />
                <include name="commons-logging-1.2.jar" />
                <include name="gson-2.3.1.jar" />
                <include name="httpclient-4.4.1.jar" />
                <include name="httpcore-4.4.1.jar" />
                <!-- We actually seem to need both the server and the client jar -->
                <include name="kafka_2.11-0.8.2.0.jar" />
                <include name="kafka-clients-0.8.2.0.jar" />
                <include name="log4j-1.2.16.jar" />
                <include name="metrics-core-2.2.0.jar" />
                <include name="scala-parser-combinators_2.11-1.0.2.jar" />
                <include name="slf4j-api-1.7.6.jar" />
                <include name="slf4j-log4j12-1.6.1.jar" />
                <include name="zkclient-0.3.jar" />
                <include name="zookeeper-3.4.6.jar" />
            </tarfileset>
            <tarfileset dir="${openwhisk.dir}/common/libs/spray" prefix="dispatcher-libs">
                <include name="akka-actor_2.11-2.3.9.jar" />
                <include name="akka-slf4j_2.11-2.3.9.jar" />
                <include name="apache-log4j-extras-1.2.17.jar" />
                <include name="config-1.2.1.jar" />
                <include name="mimepull-1.9.5.jar" />
                <include name="parboiled-core-1.1.7.jar" />
                <include name="parboiled-scala_2.11-1.1.7.jar" />
                <include name="shapeless_2.11-1.2.4.jar" />
                <include name="spray-caching_2.11-1.3.3.jar" />
                <include name="spray-can_2.11-1.3.3.jar" />
                <include name="spray-client-1.3.1.jar" />
                <include name="spray-http_2.11-1.3.3.jar" />
                <include name="spray-httpx_2.11-1.3.3.jar" />
                <include name="spray-io_2.11-1.3.3.jar" />
                <include name="spray-json_2.11-1.3.2.jar" />
                <include name="spray-routing_2.11-1.3.3.jar" />
                <include name="spray-util_2.11-1.3.3.jar" />
            </tarfileset>
        </tar>

        <!-- build image -->
        <exec executable="/bin/bash" failonerror="true">
            <arg line="${openwhisk.dir}/tools/docker/dockerWithRetry.sh ${docker.timeout.long} --host tcp://${main.docker.endpoint}" />
            <arg line="${docker.tls.cmd}" />
            <arg line="build -t whisk/dispatcher '${dispatcher.scratch}'" />
        </exec>

        <!-- cleanup -->
        <delete dir="${dispatcher.scratch}" />

    </target>

    <target name="pushDispatcher">
        <var file="whisk.properties" />
        <antcall target="pushImageToRegistry">
            <param name="docker.endpoint" value="${main.docker.endpoint}" />
            <param name="docker.image.to.push" value="whisk/dispatcher" />
        </antcall>
    </target>

    <!-- start the activator service -->
    <target name="startActivator">
        <var file="whisk.properties" />
        <antcall target="pullImageFromRegistry">
            <param name="docker.image.to.pull" value="whisk/dispatcher" />
            <param name="docker.endpoint" value="${main.docker.endpoint}" />
        </antcall>
        <exec executable="docker" failonerror="true">
            <arg line="--host tcp://${main.docker.endpoint}" />
            <arg line="${docker.tls.cmd}" />
            <arg line="run" />
            <arg line="${docker.restart.opts}" />
            <arg line="${docker.timezone.mount}" />
            <arg line="-p ${activator.host.port}:${activator.docker.port}" />
            <arg line="-e &quot;CONSULSERVER_HOST=${consulserver.host}&quot;" />
            <arg line="-e &quot;CONSUL_HOST_PORT4=${consul.host.port4}&quot;" />
            <arg line="-e &quot;PORT=${activator.docker.port}&quot;" />
            <arg line="-e &quot;COMPONENT_NAME=activator&quot;" />
            <!-- consul service config -->
            <arg line="-e &quot;SERVICE_NAME=activator&quot;" />
            <arg line="${consul.service.check}" />
            <arg line="-v ${whisk.logs.dir}/activator:/logs" />
            <arg line="-h activator_${main.docker.endpoint}" />
            <arg line="-d --name activator ${docker.registry}whisk/dispatcher:${docker.image.tag} /startDispatcher.sh activator" />
        </exec>
    </target>

    <target name="waitActivator">
        <var file="whisk.properties" />
        <ant antfile="${openwhisk.dir}/build.xml" target="waitComponent">
            <property name="component" value="activator" />
            <property name="component.host" value="${activator.host}:${activator.host.port}" />
        </ant>
    </target>

</project>
