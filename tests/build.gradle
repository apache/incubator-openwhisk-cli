apply plugin: 'scala'
apply plugin: 'eclipse'
compileTestScala.options.encoding = 'UTF-8'

evaluationDependsOn(':clitests')
evaluationDependsOn(':common:scala')

project(':clitests').test.onlyIf = {false}
compileTestScala.dependsOn(':clitests:compileTestScala')

repositories {
    mavenCentral()
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false } // force tests to run every time
}

task testWithoutCredentials(type: Test) {
    exclude 'packages/watson/**'
    exclude 'packages/slack/**'
    exclude 'packages/weather/**'
}

dependencies {
    compile "org.scala-lang:scala-library:${gradle.scala.version}"
    compile project(':clitests')
    compile project(':clitests').sourceSets.test.output

    compile project(':common:scala')
    compile project(':core:controller')
    compile project(':core:invoker')
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = gradle.scala.compileFlags
}


def keystorePath = new File(sourceSets.test.scala.outputDir, 'keystore')
task deleteKeystore(type: Delete) {
    delete keystorePath
}

task createKeystore(dependsOn: deleteKeystore) {
    doLast {
        Properties props = new Properties()
        props.load(new FileInputStream(file(gradle.owPath + '/whisk.properties')))
        keystorePath.parentFile.mkdirs()
        def cmd = ['keytool', '-import', '-alias', 'Whisk', '-noprompt', '-trustcacerts', '-file', file(props['whisk.ssl.cert']), '-keystore', keystorePath, '-storepass', 'openwhisk']
        cmd.execute().waitForProcessOutput(System.out, System.err)
    }
}

afterEvaluate {
    tasks.withType(Test) {
        dependsOn createKeystore
    }
}
